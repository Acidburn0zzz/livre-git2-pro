<<<<<<< HEAD
=== Création et configuration d'un compte

(((GitHub, comptes utilisateur)))
La première chose à faire consiste à créer une compte utilisateur gratuit.
Visitez simplement https://github.com[], choisissez un nom d'utilisateur qui n'est pas déjà pris, fournissez une adresse mail et un mot de passe, puis cliquez sur le gros bouton vert « Sign up for GitHub ».

.Le formulaire d'enregistrement de GitHub.
image::images/signup.png[Le formulaire d'enregistrement de GitHub.]

La page suivants présente les différents plans de services avec leurs prix, mias on peut sans problème l'ignorer pour l'instant.
GitHub vous enverra un email pour vérifier l'adresse que vous avez fournie.
Suivez les instructions mentionnées, cette étape étant particulièrement importante comme nous allons le voir.

[NOTE]
====
GitHub fournit toutes les fonctionnalités avec les comptes gratuits, avec pour seule limitation que tous vos projets doivent être totalement publics (tout le monde y a accès en lecture).
Les plans de services payants de GitHub incluent un certain nombre de projets privés, mais nous ne traiterons pas de ce cas dans ce livre.
====

En cliquant l'Octochat (_Octocat_) dans le coin supérieur gauche de l'écran, vous accéder à votre page de tableau de bord.
Vous voici prêt à utiliser GitHub.

==== Accès SSH

(((clés SSH, avec GitHub)))
Maintenant, vous avez la possibilité de vous connecter à des dépôts Git en utilisant le protocole `https://`, vous authentifier au moyent de votre nom d'utilisateur et de votre mot de passe.
Cependant, pour cloner simplement des projets publics, il n'est même pas nécessaire de s'enregistrer ‑ le compte que nous venons de créer ne sert que lors qu'on duplique (_fork_) un projet ou lorsqu'on pousse sur son dépôt plus tard.

Si vous préférez utiliser des serveur distants en SSH, vous aurez besoin de renseigner votre clé publique.
Si vous n'en possédez pas déjà une, référez-vous à <<_generate_ssh_key>>.
Ouvrez votre page de gestion de compte (``Account settings'') en utilisant le lien dans le coin supérieur droit de la fenêtre :

.Le lien sur la page de gestion de compte.
image::images/account-settings.png[Le lien sur la page de gestion de compte.]

Sélectionnez ensuite la section ``SSH keys'' sur le côté gauche.

.Le lien ``SSH keys''.
image::images/ssh-keys.png[Le lien ``SSH keys''.]

Maintenant, cliquez sur le bouton « `Add an SSH key` » , nommez votre clé, copier le contenu du fichier de clé publique `~/.ssh/id_rsa.pub` (ou autre si vous l'avez appelé différemment) dans la zone de texte et cliquez sur ``Add key''.

[NOTE]
====
Assurez-vous de nommer votre clé SSH de manière à vous en souvenir. Vous pouvez nommer chaque clé (par ex. « Mon laptop » ou « compte travail ») de façon à la retrouver facilement si vous devez la révoquer.
====

[[_personal_avatar]]
==== Votre Avatar

Ensuite, si vous le souhaitez, vous pouvez remplacer l'avatar généré pour vous par une image de votre choix.
Rendez-vous d'abord dans l'onglet ``Profile'' (au dessus de ``SSH Keys'') et cliquez sur ``Upload new picture''.

.Le lien ``Profile''.
image::images/your-profile.png[Le lien ``Profile''.]

Nous allons choisir une copie du logo Git qui se trouve sur notre disque dur puis la retailler.

.Retailler son avatar.
image::images/avatar-crop.png[Retailler son  avatar téléchargé.]

À présent, toutes vos interventions sur le site seront agrémentées de votre avatar au côté de votre nom d'utilisateur.

Si vous avez déjà téléchargé un avatar sur le service Gravatar (utilisé souvent pour les comptes Wordpress), cet avatar sera utilisé par défaut et vous n'avez pas besoin de réaliser cette étape.

==== Vos adresses Email
=======
=== Configuration et paramétrage d'un compte

(((GitHub, user accounts)))
La première chose que vous devez faire est de créer gratuitement un compte utilisateur.
Allez tout simplement sur https://github.com[], choisissez un nom d'utilisateur qui n'est pas déjà pris et saisissez
une adresse électronique et un mot de passe, puis cliquez sur le gros bouton vert « Sign up for GitHub » (S'inscrire sur GitHub).

.Le formulaire d'inscription de GitHub.
image::images/signup.png[Le formulaire d'inscription de GitHub.]

La deuxième chose que vous verrez est la page des tarifs pour des projets améliorés mais il vaut mieux ignorer
cela pour l'instant. GitHub vous envoie un courriel pour vérifier l'adresse fournie. Poursuivez et faites-le, c'est
très important (comme nous allons le voir plus tard).

[NOTE]
====
Vous avez accès à toutes les fonctionnalités de GitHub avec un compte gratuit, à la condition que tous vos projets soient
entièrement publics (tout le monde peut y accéder en lecture).
Les projets payant de GitHub comprennent un nombre défini de projets privés mais nous ne parlerons pas de cela
dans ce livre.
====

En cliquant sur le logo Octocat (logo en forme de chat) dans le coin supérieur gauche de l'écran, vous accéderez
à votre tableau de bord. Vous êtes maintenant prêt à utiliser GitHub.

==== Accès par SSH 

(((SSH keys, with GitHub)))
Pour l'instant, vous êtes parfaitement capable de vous connecter aux dépôts Git en utilisant le protocole `https://`
et en s'identifiant avec le nom d'utilisateur et le mot de passe que vous venez de configurer.
Cependant, pour simplement cloner des projets publics, il n'est pas nécessaire de s'authentifier - le compte récemment
créé entre en jeu lorsque vous faites un « fork » (bifurcation) de projets ou lorsque vous poussez vers vos « forks » plus tard.

Si vous désirez utiliser des accès SSH, vous devez configurer une clé publique 
(si vous n'en avez pas déjà une, consultez <<_generate_ssh_key>>).
Accédez aux paramètres de votre compte en utilisant le lien en haut à droite de la fenêtre :

.Lien vers « Account settings » (paramètres du compte).
image::images/account-settings.png[Lien vers « Account settings » (paramètres du compte).]

Puis sélectionnez la section ``SSH keys'' (clés SSH) dans le menu de gauche.

.Lien vers « SSH keys » (clés SSH).
image::images/ssh-keys.png[Lien vers « SSH keys » (clés SSH).]

Ensuite, cliquez sur le bouton « `Add SSH key` » (ajouter une clé SSH), donner un nom à votre clé, coller le contenu de votre fichier public de clé `~/.ssh/id_rsa.pub` (ou autre si vous lui avez donné un autre nom) dans la zone de texte et cliquez sur « Add key » (ajouter la clé).

[NOTE]
====
Assurez-vous de choisir un nom facile à retenir pour votre clé SSH. Vous pouvez donner un nom à chacune de vos clés
(par ex. : « Mon portable » ou « Compte travail ») afin que vous puissiez facilement retrouver la bonne si devez révoquer une clé plus tard.
====

[[_personal_avatar]]
==== Votre avatar

Si vous le voulez, vous pouvez remplacer l'avatar qui est généré pour vous par une image de votre choix. Sélectionnez la section «Profile » (profil) (au dessus de la section « SSH Keys ») et cliquez sur « Upload new picture » (télécharger une nouvelle image).

.Lien vers « Profile » (profil).
image::images/your-profile.png[Lien vers « Profile » (profil).]

Après avoir sélectionné une image sur votre disque dur, il vous est possible de la recadrer.

.Recadrage de l'avatar
image::images/avatar-crop.png[Recadrage de l'avatar.]

Maintenant, partout où vous interagissez sur le site, les gens verrons votre avatar à côté de votre nom d'utilisateur.

S'il se trouve que vous avez déposé un avatar sur le service populaire Gravatar (souvent utilisé pour les comptes
Wordpress), cet avatar sera utilisé par défaut et vous n'avez pas à exécuter cette étape.

==== Votre adresse électronique
>>>>>>> chap6_fr

Github utilise les adresses email pour faire correspondre les _commits_ Git avec les utilisateurs.
Si vous avez de multiples adresse email dans vos _commits_ et que vous souhaitez que GitHub les lie correctement, vous devez ajouter toutes les adresses que vous avez utilisées dans la section Emails de la section d'administration.

[[_add_email_addresses]]
.Ajout d'adresses email
image::images/email-settings.png[Ajout d'adresses email.]

Dans <<_add_email_addresses>> nous pouvons voir certains états possibles.
L'adresse du haut est vérifiée et renseignée comme l'adresse primaire, c'est-à-dire que ce sera l'adresse utilisée pour vous envoyer toutes les notifications.
La seconde adresse est vérifiée et peut aussi être une adresse primaire si on l'inverse avec la première.
La dernière adresse est non vérifiée, ce qui signifie que vous ne pouvez pas en faire votre adresse primaire.
Si GitHub détecte une de ces adresses dans des messages de validation dans un dépôt du site, il les liera à votre compte utilisateur.

==== Authentification à deux facteurs

Enfin, pour plus de sécurité, vous devriez vraiment régler l'authentification à deux facteurs ou « 2FA » (_2 Factor Authentication_).
L'authentification est un mécanisme d'authentification qui est devenu très populaire dernièrement pour mitiger les risques des compromission de votre compte si votre mot de passe est dérobé.
Une fois activée, GitHub vous demandera deux méthodes différentes d'authentification, de sorte que si l'une devait être compromise, un attaquant ne pourrait tout de même pas accéder à votre compte.

Vous pouvez trouver les réglages de l'authentification à deux facteurs sous l'onglet _Security_ de votre page de configuration.

.2FA dans l'onglet Security
image::images/2fa-1.png[2FA dans l'onglet Security]

Si vous cliquez sur le bouton ``Set up two-factor authentication'', vous serez mené à une page de configuration où vous pouvez choisir une application de téléphone mobile pour générer votre code secondaire (un « mot de passe à usage unique basé sur le temps ») ou vous pouvez faire GitHub vous envoyer un code par SMS chaque fois que vous avez besoin de vous identifier.

Après avoir choisi la méthode préférée et suivi les instructions pour activer 2FA, votre compte sera un peu plus sécurisé et vous devrez ajouter un code en complément de votre mot de passe quand vous vous identifierez dans GitHub.
