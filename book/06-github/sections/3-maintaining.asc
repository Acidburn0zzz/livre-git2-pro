[[_maintaining_gh_project]]
=== Maintenance d'un projet

Maintenant que vous êtes à l'aise sur les aspects contribution à un projet, regardons maintenant l'autre côté : la création, la maintenance et l'administration de vos propres projets.

==== Création d'un nouveau dépôt

Créons un nouveau dépôt pour permettre le partage du code de notre projet avec d'autres. Commencez par cliquer sur le bouton « New repository » (nouveau dépôt) sur le côté droit de votre tableau de bord ou sur le bouton `+` dans la barre d'outils du haut à côté de votre nom d'utilisateur comme sur la figure <<_new_repo_dropdown>>.

.La zone « Your repositories » (vos dépôts)
image::images/newrepo.png[La zone « Your repositories » (vos dépôts).]

[[_new_repo_dropdown]]
.La liste déroulante « New repository » (nouveau dépôt)
image::images/new-repo.png[La liste déroulante « New repository » (nouveau dépôt).]

Vous êtes redirigé vers le formulaire pour la création de nouveau dépôt :

.Le formulaire « new repository » (nouveau dépôt).
image::images/newrepoform.png[Le formulaire « new repository » (nouveau dépôt).]

Tout ce que vous avez à faire, c'est de fournir un nom de projet, les autres champs sont facultatifs. Pour l'instant, cliquez juste sur le bouton « Create Repository » (créer un dépôt) et paf, vous obtenez un nouveau dépôt sur GitHub nommé `<utilisateur>/<nom_du_projet>`.

Puisque vous n'avez pas encore de code, GitHub vous affiche des instructions sur la façon de créer un tout nouveau dépôt Git ou de se connecter à un projet Git existant. Nous ne détaillerons pas cela ici ; si vous avez besoin d'un rappel, vérifiez <<_git_basics_chapter>>.

Maintenant que votre projet est hébergé sur GitHub, vous pouvez donner l'URL à toutes les personnes avec lesquelles vous voulez partager votre projet. Chaque projet est accessible via HTTP par `https://github.com/<utilisateur>/<nom_du_projet>` et via SSH par `git@github.com:<utilisateur>/<nom_du_projet>`. Git peut récupérer (fetch) et pousser (push) en utilisant les deux URL mais l'accès est contrôlé sur la base des paramètres d'authentification de l'utilisateur qui s'y connecte.

[NOTE]
====
Il est souvent mieux de partager l'URL basé sur HTTP pour un projet public puisque l'utilisateur n'a pas besoin d'avoir un compte GitHub pour y accéder et pour le cloner. Les utilisateurs devront posséder un compte et avoir déposé une clé SSH pour accéder à votre projet si vous leur donnez l'URL SSH. L'URL HTTP est également exactement le même que celui que vous colleriez dans votre navigateur pour y afficher le projet.
====

==== Ajout de collaborateurs

Si vous travaillez avec d'autres personnes à qui vous voulez donner l'accès en soumission (commit), vous devez les ajouter en tant que « collaborateurs ». Si Ben, Jeff et Louise possèdent tous un compte GitHub et que vous voulez qu'ils puissent pousser sur votre dépôt, vous pouvez les ajouter à votre projet. En faisant cela, vous leur donnez un accès en poussée (push) ce qui signifie qu'ils possèdent un accès en lecture et en écriture au projet et au dépôt Git.

Cliquez sur le lien « Settings » (paramètres) en bas de la barre latérale de droite.

.Le lien des paramètres (Settings) du dépôt.
image::images/reposettingslink.png[Le lien des paramètres du dépôt.]

Ensuite sélectionnez « Collaborators » dans le menu de gauche, saisissez un nom d'utilisateur dans la boîte et cliquez sur « Add collaborator » (ajouter un collaborateur). Vous pouvez répéter cette action autant de fois que vous le voulez pour permettre l'accès à toutes les personnes qui vous plaisent. Si vous devez révoquer leur accès, il suffit de cliquer sur le « X » à droite de leur nom.

.Les collaborateurs du dépôt.
image::images/collaborators.png[La boîte des collaborateurs du dépôt.]

==== Gestion des requêtes de tirage

Maintenant que vous possédez un projet contenant un peu de code et peut-être même quelques collaborateurs qui possèdent un accès en poussée, voyons ce que vous devez faire lorsque vous recevez vous-même une requête de tirage.

Les requêtes de tirage peuvent provenir soit d'une branche d'un clone de votre dépôt ou d'une autre branche du même dépôt. La seule différence est que celles d'un clone proviennent souvent de personnes vers lesquelles vous ne pouvez pas pousser sur leurs branches et qui ne peuvent pas pousser vers les vôtres alors qu'avec des requêtes de tirage internes, les deux parties peuvent généralement accéder à la branche.

Pour ces exemples, supposons que vous êtes « tonychacon » et que vous avez créé un nouveau projet de code Arudino qui s'appelle « fade ».

[[_email_notifications]]
===== Notifications par courriel

Quelqu'un se connecte et fait une modification à votre programme et vous envoie une requête de tirage. Vous devriez recevoir un courriel vous informant de cette nouvelle requête de tirage et ressemblant à celui sur la figure <<_email_pr>>.

[[_email_pr]]
.Notification par courriel d'une nouvelle requête de tirage.
image::images/maint-01-email.png[Notification par courriel d'une requête de tirage]

Faisons quelques remarques à propos de ce courriel. Celui-ci vous fournit quelques statistiques : une liste de fichiers modifiés par la requête de tirage et le nombre de modifications. Il vous donne un lien vers la requête de tirage sur GitHub et il vous fournit également quelques URL que vous pouvez utiliser en ligne de commande.

Remarquez la ligne `git pull <url> patch-1`, il s'agit d'une manière simple de fusionner une branche distante sans avoir à ajouter un dépôt distant. Nous avons déjà vu rapidement cela dans <<_checking_out_remotes>>. Si vous voulez, vous pouvez créer une branche thématique et basculer vers celle-ci puis lancer cette commande pour fusionner les modifications de cette requête de tirage

Les autres URL intéressants sont les URL `.diff` et `.patch`, qui, comme vous l'avez certainement deviné, vous fournissent des versions au format différence unifiée et patch de la requête de tirage. Vous pourriez techniquement fusionner le travail contenu dans la requête de tirage de la manière suivante :

[source,shell]
----
$ curl http://github.com/tonychacon/fade/pull/1.patch | git am
----

===== Collaboration à une requête de tirage

Comme déjà traité dans la section <<_github_flow>>, vous pouvez maintenant commencer une conversation avec la personne qui a ouvert la requête de tirage. Vous pouvez commenter certaines lignes de code, commenter des soumissions complètes ou commenter la requête de tirage elle-même en utilisant les outils Markdown, saveur GitHub un peu partout.

À chaque fois que quelqu'un d'autre commente la requête de tirage, vous recevrez des notifications pour courriel afin d'être au courant de chaque activité. Celles-ci possèdent un lien vers la requête de tirage dans laquelle l'activité s'est produite et vous pouvez également répondre directement au courriel pour commenter le fil de discussion de la requête de tirage.

.Les réponses aux courriels sont incorporées dans le fil de discussion.
image::images/maint-03-email-resp.png[Réponse par courriel]

Une fois que le code est dans un état satisfaisant et que vous voulez le fusionner, vous pouvez soit tirer le code (pull) et le fusionner localement, soit utiliser la syntaxe décrite précédemment `git pull <url> <branch>`, soit ajouter le clone comme dépôt distant, le récupérer (fetch) et le fusionner (merge).

Si la fusion est triviale, vous pouvez également cliquer sur le bouton « Merge » (fusionner) sur le site GitHub. Une fusion sans avance rapide (non-fast-forward) sera réalisée ce qui créera une soumission de fusion (merge commit) même si une fusion en avance rapide (fast-forward) était possible. Cela signifie que dans tous les cas, à chaque fois que vous cliquez sur le bouton « Merge », une soumission de fusion est créée. Comme vous pouvez le voir sur <<_merge_button>>, GitHub vous donne toutes ces informations si vous cliquez sur le lien descriptif.

[[_merge_button]]
.Bouton « Merge » et instructions pour la fusion manuelle d'une requête de tirage.
image::images/maint-02-merge.png[Bouton « Merge »]

Si vous décidez que vous ne voulez pas fusionner, vous pouvez tout simplement fermer la requête de tirage et la personne qui l'a créée en sera informée.

[[_pr_refs]]
===== Références de requête de tirage

Si vous gérez *beaucoup* de requêtes de tirage et que vous ne voulez pas ajouter une série de serveurs distants ou faire des tirages isolés à chaque fois, GitHub vous permet de faire une astuce. C'est quelque peu une astuce avancée et nous entrerons dans les détails un peu plus dans la section <<_refspec>> mais cela peut être assez utile.

If you're dealing with a *lot* of Pull Requests and don't want to add a bunch of remotes or do one time pulls every time, there is a neat trick that GitHub allows you to do. This is a bit of an advanced trick and we'll go over the details of this a bit more in <<_refspec>>, but it can be pretty useful.

GitHub traite en réalité les branches de requête de tirage d'un dépôt comme une sorte de pseudo-branches sur le serveur. Par défaut, vous ne les obtenez pas lorsque vous clonez mais elles sont présentes de façon cachée et vous pouvez y accéder assez facilement.

GitHub actually advertises the Pull Request branches for a repository as sort of pseudo-branches on the server. By default you don't get them when you clone, but they are there in an obscured way and you can access them pretty easily.

Pour démontrer cela, nous allons utiliser une commande bas-niveau (souvent appelée commande de « plomberie » dont nous parlerons un peu plus dans la section <<_plumbing_porcelain>>) qui s'appelle `ls-remote`. Cette commande n'est en général pas utilisée dans les opérations quotidiennes mais elle est utile pour nous afficher les références qui sont présentes sur le serveur.

To demonstrate this, we're going to use a low-level command (often referred to as a « plumbing » command, which we'll read about more in <<_plumbing_porcelain>>) called `ls-remote`. This command is generally not used in day-to-day Git operations but it's useful to show us what references are present on the server.

Si nous lançons cette commande sur le dépôt « blink » que nous utilisions tout à l'heure, nous obtenons une liste de toutes les branches et étiquettes et d'autres références dans le dépôt.

If we run this command against the « blink » repository we were using earlier, we will get a list of all the branches and tags and other references in the repository.

[source,shell]
----
$ git ls-remote https://github.com/schacon/blink
10d539600d86723087810ec636870a504f4fee4d	HEAD
10d539600d86723087810ec636870a504f4fee4d	refs/heads/master
6a83107c62950be9453aac297bb0193fd743cd6e	refs/pull/1/head
afe83c2d1a70674c9505cc1d8b7d380d5e076ed3	refs/pull/1/merge
3c8d735ee16296c242be7a9742ebfbc2665adec1	refs/pull/2/head
15c9f4f80973a2758462ab2066b6ad9fe8dcf03d	refs/pull/2/merge
a5a7751a33b7e86c5e9bb07b26001bb17d775d1a	refs/pull/4/head
31a45fc257e8433c8d8804e3e848cf61c9d3166c	refs/pull/4/merge
----

Bien sûr, si vous êtes dans votre dépôt et que vous lancez la commande `git ls-remote origin` ou avec un autre serveur distant, quelque chose de similaire s'affiche.

Of course, if you're in your repository and you run `git ls-remote origin` or whatever remote you want to check, it will show you something similar to this.

Si le dépôt se trouve sur GitHub et que vous avez des requêtes de tirage qui ont été ouvertes, vous obtiendrez ces références préfixées par `refs/pull/`. Ce sont simplement des branches mais comme elles ne sont pas sous `refs/heads/`, vous ne les obtenez pas normalement lorsque vous clonez ou récupérez à partir du serveur -- le processus de récupération les ignorent normalement

If the repository is on GitHub and you have any Pull Requests that have been opened, you'll get these references that are prefixed with `refs/pull/`. These are basically branches, but since they're not under `refs/heads/` you don't get them normally when you clone or fetch from the server -- the process of fetching ignores them normally.

Il existe deux références par requête de tirage - une qui se termine par `/head` et qui pointe vers la même soumission que la dernière soumission dans la branche de requête de tirage. Donc si quelqu'un ouvre une requête de tirage sur notre dépôt, que leur branche s'appelle `bug-fix` et qu'elle pointe sur la soumission `a5a775`, alors dans *notre* dépôt nous n'aurons pas de branche `bug-fix` (puisqu'elle se trouve dans leur clone) mais nous _aurons_ `pull/<pr#>/head`  qui pointe vers `a5a775`. Cela signifie que vous pouvez assez facilement tirer chaque branche de requête de tirage d'un coup sans avoir à ajouter tout un tas de serveurs distants.

There are two references per Pull Request - the one that ends in `/head` points to exactly the same commit as the last commit in the Pull Request branch. So if someone opens a Pull Request in our repository and their branch is named `bug-fix` and it points to commit `a5a775`, then in *our* repository we will not have a `bug-fix` branch (since that's in their fork), but we _will_ have `pull/<pr#>/head` that points to `a5a775`. This means that we can pretty easily pull down every Pull Request branch in one go without having to add a bunch of remotes.

Vous pouvez maintenant récupérer la référence directement.

Now, you could do something like fetching the reference directly.

[source,shell]
----
$ git fetch origin refs/pull/958/head
From https://github.com/libgit2/libgit2
 * branch            refs/pull/958/head -> FETCH_HEAD
----

Cela dit à Git, « Connecte-toi au serveur distant `origin` et télécharge la référence appelée `refs/pull/958/head` ». Git obéit joyeusement et télécharge tout ce dont vous avez besoin pour construire cette référence et positionne un pointeur vers la soumission souhaitée sous `.git/FETCH_HEAD`.
Vous pouvez la suivre avec `git merge FETCH_HEAD` dans une branche dans laquelle vous voulez la tester mais ce message de fusion (merge commit) semble un peu bizarre.
De plus, si vous passez en revue *beaucoup* de requêtes de tirage, cela devient fastidieux.

This tells Git, « Connect to the `origin` remote, and download the ref named `refs/pull/958/head`. »
Git happily obeys, and downloads everything you need to construct that ref, and puts a pointer to the commit you want under `.git/FETCH_HEAD`.
You can follow that up with `git merge FETCH_HEAD` into a branch you want to test it in, but that merge commit message looks a bit weird.
Also, if you're reviewing a *lot* of pull requests, this gets tedious.

Il existe également une façon de récupérer _toutes_ les requêtes de tirage et de les maintenir à jour à chaque fois que vous vous connectez au serveur distant.
Ouvrez le fichier `.git/config` dans votre éditeur favori et cherchez le serveur `origin`.
Cela devrait ressembler à cela :

There's also a way to fetch _all_ of the pull requests, and keep them up to date whenever you connect to the remote.
Open up `.git/config` in your favorite editor, and look for the `origin` remote.
It should look a bit like this:

----
[remote "origin"]
    url = https://github.com/libgit2/libgit2
    fetch = +refs/heads/*:refs/remotes/origin/*
----

La ligne qui commence par `fetch =` est un « refspec ».
C'est une façon de faire correspondre des noms sur un serveur distant à des noms dans votre dossier `.git` local.
Celle-ci en particulier dit à Git, « les choses sur le serveur distant qui se trouvent sous `refs/heads` doivent aller dans mon dépôt local sous `refs/remotes/origin` ».
Vous pouvez modifier cette section pour ajouter un autre refspec :

That line that begins with `fetch =` is a « refspec. »
It's a way of mapping names on the remote with names in your local `.git` directory.
This particular one tells Git, "the things on the remote that are under `refs/heads` should go in my local repository under `refs/remotes/origin`."
You can modify this section to add another refspec:

----
[remote "origin"]
    url = https://github.com/libgit2/libgit2.git
    fetch = +refs/heads/*:refs/remotes/origin/*
    fetch = +refs/pull/*/head:refs/remotes/origin/pr/*
----

Cette dernière ligne dit à Git, « Toutes les références du type `refs/pull/123/head` doivent être enregistrées localement comme `refs/remotes/origin/pr/123` ».
Maintenant, si vous enregistrez ce fichier et faites un `git fetch` :

That last line tells Git, « All the refs that look like `refs/pull/123/head` should be stored locally like `refs/remotes/origin/pr/123`. »
Now, if you save that file, and do a `git fetch`:

[source,shell]
----
$ git fetch
# …
 * [new ref]         refs/pull/1/head -> origin/pr/1
 * [new ref]         refs/pull/2/head -> origin/pr/2
 * [new ref]         refs/pull/4/head -> origin/pr/4
# …
----

Maintenant toutes les requêtes de tirage distantes sont représentées localement par des références qui agissent un peu comme des branches de suivi : elles sont en lecture seule et elles se mettent à jour lorsque vous faites un fetch.
Il est ainsi super facile d'essayer le code à partir d'une requête de tirage localement :

Now all of the remote pull requests are represented locally with refs that act much like tracking branches; they're read-only, and they update when you do a fetch.
This makes it super easy to try the code from a pull request locally:

[source,shell]
----
$ git checkout pr/2
Checking out files: 100% (3769/3769), done.
Branch pr/2 set up to track remote branch pr/2 from origin.
Switched to a new branch 'pr/2'
----

Les Sherlock Holmes en herbe parmi vous auront remarqué le terme `head` à la fin de la partie distante du refspec.
Il y a également une référence `refs/pull/#/merge` du côté de GitHub qui représente la soumission qui résulterait si vous cliquiez sur le bouton « Fusionner » sur le site. Cela peut vous permettre de tester la fusion avant même de cliquer sur le bouton.

The eagle-eyed among you would note the `head` on the end of the remote portion of the refspec.
There's also a `refs/pull/#/merge` ref on the GitHub side, which represents the commit that would result if you push the « merge » button on the site. This can allow you to test the merge before even hitting the button.


===== Requêtes de tirage sur des requêtes de tirage

Non seulement vous pouvez ouvrir des requêtes de tirage qui cible la branche principal ou `master`, mais vous pouvez en fait ouvrir une requête de tirage ciblant n'importe quelle branche sur le réseau. En réalité, vous pouvez même cibler une autre requête de tirage.

Not only can you open Pull Requests that target the main or `master` branch, you can actually open a Pull Request targeting any branch in the network. In fact, you can even target another Pull Request.

Si vous remarquez une requête de tirage qui va dans la bonne direction et que vous avez une idée de modification qui dépend de celle-ci, ou vous n'êtes pas sûr que c'est une bonne idée, ou vous n'avez tout simplement pas accès en poussée vers la branche cible, vous pouvez ouvrir une requête de tirage directement sur elle.

If you see a Pull Request that is moving in the right direction and you have an idea for a change that depends on it or you're not sure is a good idea, or you just don't have push access to the target branch, you can open a Pull Request directly to it.

Lorsque vous allez ouvrir une requête de tirage, une boîte en haut de la page vous indique vers quelle branche vous voulez pousser et à partir de quelle branche vous allez tirer. Si vous cliquez sur le bouton « Edit » à droite de cette boîte, vous pouvez modifier non seulement les branches mais aussi quel clone.

When you go to open a Pull Request, there is a box at the top of the page that specifies which branch you're requesting to pull to and which you're requesting to pull from. If you hit the « Edit » button at the right of that box you can change not only the branches but also which fork.

[[_pr_targets]]
.Modification manuelle du clone cible et de la branche de la requête de tirage.
image::images/maint-04-target.png[Cibles d'une requête]

Ici vous pouvez très facilement indiquer de fusionner votre nouvelle branche sur une autre requête de tirage ou un autre clone du projet.

Here you can fairly easily specify to merge your new branch into another Pull Request or another fork of the project.

==== Mentions et notifications

GitHub dispose également d'un système de notifications assez sympa intégré qui peut devenir utile lorsque vous avez des questions et besoin du retour de certaines personnes ou d'équipes.

GitHub also has a pretty nice notifications system built in that can come in handy when you have questions or need feedback from specific individuals or teams.

Dans tous les commentaires, si vous saisissez le caractère `@`, cela commence à proposer des noms et des noms d'utilisateur de personnes qui collaborent ou contribuent au projet.

In any comment you can start typing a `@` character and it will begin to autocomplete with the names and usernames of people who are collaborators or contributors in the project.

.Commencez à saisir @ pour faire référence à quelqu'un.
image::images/maint-05-mentions.png[Mentions]

Vous pouvez aussi faire référence à un utilisateur qui n'apparaît pas dans cette liste, mais souvent l'auto-complétion peut accélérer les choses.

You can also mention a user who is not in that dropdown, but often the autocompleter can make it faster.

Une fois que vous avez posté un commentaire contenant une référence à un utilisateur, ce dernier reçoit une notification. Cela signifie que c'est une manière très pratique de faire rentrer des gens dans une conversation plutôt que de leur demander. Très souvent dans des requêtes de tirage sur GitHub, les gens vont attirer d'autres personnes dans leurs équipes ou dans leur société pour vérifier une anomalie ou une requête de tirage.

Once you post a comment with a user mention, that user will be notified. This means that this can be a really effective way of pulling people into conversations rather than making them poll. Very often in  Pull Requests on GitHub people will pull in other people on their teams or in their company to review an Issue or Pull Request.

Si quelqu'un est cité dans une requête de tirage ou une anomalie, ils seront « inscrits » à celle-ci et continueront à recevoir des notifications dès qu'une activité se produit. Vous serez également inscrit à quelque chose si vous l'ouvrez, si vous observez (watch) le dépôt ou si vous faites un commentaire sur quelque chose. Si vous ne souhaitez plus recevoir de notifications, cliquez sur le bouton « Unsubscribe » (se désinscrire) sur la page pour arrêter de recevoir les mises à jour.

If someone gets mentioned on a Pull Request or Issue, they will be « subscribed » to it and will continue getting notifications any time some activity occurs on it. You will also be subscribed to something if you opened it, if you're watching the repository or if you comment on something. If you no longer wish to receive notifications, there is an « Unsubscribe » button on the page you can click to stop receiving updates on it.

.Désinscription d'une anomalie ou d'une requête de tirage.
image::images/maint-06-unsubscribe.png[Désinscription]

===== La page des notifications

Lorsque nous mentionnons « notifications » ici par rapport à GitHub, nous voulons parler de la manière spécifique dont GitHub essaye de vous joindre lorsque des événements se produisent et il existe différentes façons de les configurer.
Si vous allez dans l'onglet « Notification center » (centre de notification) dans la page des paramètres, vous pouvez voir les différentes options disponibles.

When we mention « notifications » here with respect to GitHub, we mean a specific way that GitHub tries to get in touch with you when events happen and there are a few different ways you can configure them.
If you go to the « Notification center » tab from the settings page, you can see some of the options you have.

.Options du centre de notification.
image::images/maint-07-notifications.png[Centre de notification]

Vous pouvez recevoir des notifications soit par « courriel », soit par le « Web » et vous pouvez sélectionner une, aucune ou les deux méthodes si vous participez de manière très active ou pour une activité sur les dépôts que vous surveillez.

The two choices are to get notifications over « Email » and over « Web » and you can choose either, niether or both for when you actively participate in things and for activity on repositories you are watching.

====== Notifications Web

Les notifications Web n'existe que sur GitHub et vous ne pouvez les vérifier que sur GitHub. Si vous avez sélectionné cette option dans vos préférences et qu'une notification vous est envoyée, un petit point bleu apparaît sur votre icône des notifications en haut de l'écran comme sur <<_not_center>>.

Web notifications only exist on GitHub and you can only check them on GitHub. If you have this option selected in your preferences and a notification is triggered for you, you will see a small blue dot over your notifications icon at the top of your screen as seen in <<_not_center>>.

[[_not_center]]
.Centre de notification.
image::images/maint-08-notifications-page.png[Centre de notification]

Si vous cliquez dessus, la liste de tous les éléments pour lesquels vous avez été notifiés apparaît, regroupé par projet. Vous pouvez filtrer les notifications d'un projet particulier en cliquant sur son nom dans la barre latérale gauche. Vous pouvez aussi accepter la notification en cochant l'icône à côté de celle-ci ou accepter
_toutes_ les notifications d'un projet en cochant la case en haut du groupe. Il y a aussi un bouton « muet » à côté de chaque case que vous pouvez cocher afin de ne plus recevoir de notifications sur cet élément.

If you click on that, you will see a list of all the items you have been notified about, grouped by project. You can filter to the notifications of a specific project by clicking on it's name in the left hand sidebar. You can also acknowledge the notifiction by clicking the checkmark icon next to any notification, or acknowledge _all_ of the notifictions in a project by clicking the checkmark at the top of the group. There is also a mute button next to each checkmark that you can click to not receive any further notifications on that item.

Tous ces outils sont très utiles pour gérer un grand nombre de notifications. Beaucoup d'utilisateurs de GitHub très actifs vont tout simplement arrêter complètement les notifications par courriel et gérer toutes leurs notifications à partir de cette fenêtre.

All of these tools are very useful for handling large numbers of notifications. Many GitHub power users will simply turn off email notifications entirely and manage all of their notifications through this screen.

====== Notifications par courriel

Les notifications par courriel sont l'autre façon de gérer les notifications provenant de GitHub. Si vous les avez activées, vous recevrez des courriels pour chaque notification. Nous avons vu des exemples concernant cela sur <<_email_notification>> et <<_email_pr>>. Ces courriels sont également suivis correctement ce qui est bien agréable si vous utilisez un client de messagerie qui suit les fils de discussion.

Email notifications are the other way you can handle notifications through GitHub. If you have this turned on you will get emails for each notification. We saw examples of this in <<_email_notification>> and <<_email_pr>>. The emails will also be threaded properly, which is nice if you're using a threading email client.

Un assez grand nombre de métadonnées sont incluses dans les entêtes des courriels que GitHub vous envoie ce qui peut vraiment vous aider pour configurer des filtres et des règles personnalisés.

There is also a fair amount of metadata embedded in the headers of the emails that GitHub sends you, which can be really helpful for setting up custom filters and rules.

Par exemple si nous observons les vrais entêtes du courriel envoyé à Tony dans le courriel de la figure <<_email_pr>>, nous voyons que les informations suivantes sont envoyées :

For instance, if we look at the actual email headers sent to Tony in the email shown in <<_email_pr>>, we will see the following among the information sent:

[source,mbox]
----
To: tonychacon/fade <fade@noreply.github.com>
Message-ID: <tonychacon/fade/pull/1@github.com>
Subject: [fade] Wait longer to see the dimming effect better (#1)
X-GitHub-Recipient: tonychacon
List-ID: tonychacon/fade <fade.tonychacon.github.com>
List-Archive: https://github.com/tonychacon/fade
List-Post: <mailto:reply+i-4XXX@reply.github.com>
List-Unsubscribe: <mailto:unsub+i-XXX@reply.github.com>,...
X-GitHub-Recipient-Address: tchacon@example.com
----

Il y a quelques petites choses intéressantes ici. Si vous voulez mettre en valeur ou rediriger les courriels de ce projet ou cette requête en tirage en particulier, l'information du champ `Message-ID` vous fournit toutes les données au format `<utilisateur>/<projet>/<type>/<id>`. Si c'était une anomalie, le champ `<type>` aurait été « issues » à la place de « pull ».

There are a couple of interesting things here. If you want to highlight or re-route emails to this particular project or even Pull Request, the information in `Message-ID` gives you all the data in `<user>/<project>/<type>/<id>` format. If this were an issue, for example, the `<type>` field would have been « issues » rather than « pull ».

Les champs `List-Post` et `List-Unsubscribe` signifie que si votre client de messagerie les prend en compte, vous pouvez facilement écrire (post) à la liste ou vous désinscrire (unsubscribe)  du fil de discussion. Cela correspond à cliquer sur la case « muet » sur la version Web de la notification ou sur « Unsubscribe » sur la page personnelle de l'anomalie ou de la requête de tirage.

The `List-Post` and `List-Unsubscribe` fields mean that if you have a mail client that understands those, you can easily post to the list or « Unsubscribe » from the thread. That would be essentially the same as clicking the « mute » button on the web version of the notification or « Unsubscribe » on the Issue or Pull Request page itself.

Il est aussi intéressant de noter que si les notifications par courriel et celles par le Web sont activées et que vous lisez la version courriel de la notification, la version Web sera également marquée comme lu si vous avez permis l'affichage des images dans votre client de messagerie.

It's also worth noting that if you have both email and web notifications enabled and you read the email version of the notification, the web version will be marked as read as well if you have images allowed in your mail client.

==== Fichiers spéciaux

Quelques fichiers spéciaux attirent l'attention de GitHub s'ils existent dans votre dépôt.

There are a couple of special files that GitHub will notice if they are present in your repository.

==== README

Le premier est le fichier `README` (LISEZ-MOI) qui peut être sous n'importe quel format textuel reconnu par GitHub. Par exemple, cela pourrait être `README`, `README.md`, `README.asciidoc`, etc. Si GitHub voit un fichier README dans vos sources, celui-ci sera rendu sur la page d'accueil du projet.

The first is the `README` file, which can be of nearly any format that GitHub recognizes as prose. For example, it could be `README`, `README.md`, `README.asciidoc`, etc. If GitHub sees a README file in your source, it will render it on the landing page of the project.

Pour beaucoup d'équipes, ce fichier contient toutes les informations importantes du projet pour quelqu'un qui serait nouveau dans le dépôt ou le projet. Il contient habituellement des choses comme :

* À quoi le projet sert
* Comment le configurer et l'installer
* Un exemple d'utilisation et comment le lancer
* La licence sous laquelle le projet est proposé
* Comment y contribuer

Puisque GitHub va afficher à l'écran ce fichier, vous pouvez y incorporer des images ou des liens pour faciliter la compréhension.

Many teams use this file to hold all the relevant project information for someone who might be new to the repository or project. This generally includes things like:

* What the project is for
* How to configure and install it
* An example of how to use it or get it running
* The license that the project is offered under
* How to contribute to it

Since GitHub will render this file, you can embed images or links in it for added ease of understanding.

==== CONTRIBUTING

L'autre fichier spécial que GitHub reconnaît est le fichier `CONTRIBUTING`. Si vous possédez un fichier qui nommé `CONTRIBUTING`, quelque soit son extension, GitHub affichera la figure <<_contrib_file>> lorsque quelqu'un commence à ouvrir une requête de tirage.

The other special file that GitHub recognizes is the `CONTRIBUTING` file. If you have a file named `CONTRIBUTING` with any file extension, GitHub will show <<_contrib_file>> when anyone starts opening a Pull Request.

[[_contrib_file]]
.Ouverture d'une requête de tirage si un fichier CONTRIBUTING existe.
image::images/maint-09-contrib.png[Notification du fichier CONTRIBUTING]

L'idée ici est d'expliquer les choses particulières que vous voulez ou ne voulez pas voir soumises dans une requête de tirage envoyées vers votre projet. De cette façon, les gens peuvent vraiment lire les recommandations avant d'ouvrir la requête de tirage.

The idea here is that you can specify specific things you want or don't want in a Pull Request sent to your project. This way people may actually read the guidelines before opening the Pull Request.

==== Administration du projet

Il y a généralement pas beaucoup de tâches administratives à faire si vous avez un seul projet, mais ces quelques points peuvent vous intéresser.

Generally there are not a lot of administrative things you can do with a single project, but there are a couple of items that might be of interest.

===== Modification de la branche par défaut

Si vous utilisez une autre branche que « master » comme branche par défaut et que vous voulez que les gens ouvrent les requêtes de tirage dessus ou la voient par défaut, vous pouvez modifier cela dans la page des paramètres de votre dépôt dans l'onglet « Options ».

If you are using a branch other than « master » as your default branch that you want people to open Pull Requests on or see by default, you can change that in your repository's settings page under the « Options » tab.

[[_default_branch]]
.Modification de la branche par défaut pour un projet.
image::images/maint-10-default-branch.png[Branche par défaut]

Modifiez tout simplement la branche par défaut dans la liste déroulante et celle-ci sera la branche par défaut pour toutes les opérations principales à partir de maintenant, y compris la branche qui sera extraite par défaut lorsque quelqu'un clone le dépôt.

Simply change the default branch in the dropdown and that will be the default for all major operations from then on, including which branch is checked out by default when someone clones the repository.

===== Transfert de projet

Si vous voulez transférer un projet à un autre utilisateur ou une organisation dans GitHub, il existe une option « Transfer ownership » (transférer la propriété) en bas du même onglet « Options » de la page des paramètres de votre dépôt vous permettant de faire cela.

If you would like to transfer a project to another user or an organization in GitHub, there is a « Transfer ownership » option at the bottom of the same « Options » tab of your repository settings page that allows you to do this.

[[_transfer_project]]
.Transfert d'un projet vers un autre utilisateur GitHub ou une organisation.
image::images/maint-11-transfer.png[Transfert]

C'est bien pratique si vous abandonnez un projet et que quelqu'un souhaite les récupérer ou si votre projet devient plus gros et que vous voulez le déplacer vers une organisation.

This is helpful if you are abandoning a project and someone wants to take it over, or if your project is getting bigger and want to move it into an organization.

Non seulement, cela déplace le dépôt ainsi que tous ses observateurs et étoiles vers un autre endroit, mais cela met également en place une redirection de votre URL vers le nouvel emplacement. Cela redirige également les clones et les tirages à partir de Git et pas seulement les requêtes Web.

Not only does this move the repository along with all it's watchers and stars to another place, it also sets up a redirect from your URL to the new place. It will also redirect clones and fetches from Git, not just web requests.
