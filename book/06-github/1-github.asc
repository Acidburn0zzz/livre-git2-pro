[[_github]]
== GitHub

(((GitHub)))
GitHub est l'un des plus grands serveurs de dépôts Git et est l'élément central pour la collaboration de millions de
développeurs et projets.
Une gros pourcentage de tous les dépôts Git sont hébergés sur GitHub et de nombreux projets aux sources libres l'utilisent
pour l'hébergement Git, le suivi des erreurs, l'examen du code et d'autres choses.
Bien que cela ne soit pas directement une partie du projet libre Git, il y a de fortes chances que vous vouliez
ou ayez besoin d’interagir avec GitHub à un moment donné si vous utilisez Git pour travailler.

Ce chapitre présente la façon d'utiliser GitHub de manière efficace.
Nous allons parcourir l'inscription et la gestion d'un compte, la création et l'utilisation des dépôts Git, les processus courants pour contribuer aux projets et pour accepter les contributions aux vôtres, l'interface programmatique de GitHub ainsi qu'un grand nombre d'astuces pour rendre votre vie plus simple.

Si vous n'êtes pas intéressé par l'utilisation de GitHub pour héberger vos projets personnels ou 
pour collaborer à d'autres projets hébergés sur GitHub, vous pouvez sans problème passer directement à <<_git_tools>>.

[WARNING]
.Modification de l'interface
====
Notez bien que tout comme pour de nombreux sites Web très actifs, les éléments de l'interface utilisateur apparaissant sur
les captures d'écran sont voués à des évolutions futures. Heureusement, l'idée générale que nous essayons d'aborder ici
sera toujours présente, mais si vous désirez voir des versions plus à jour de ces captures, il se peut que les versions en ligne de ce livre montrent des captures plus récentes.
====

include::sections/1-setting-up-account.asc[]

include::sections/2-contributing.asc[]

include::sections/3-maintaining.asc[]

include::sections/4-managing-organization.asc[]

include::sections/5-scripting.asc[]

=== Résumé

Vous êtes maintenant un utilisateur de GitHub.
Vous savez comment créer un compte, gérer une organisation, créer et pousser vers des dépôts, contribuer aux
projets d'autres personnes et accepter les contributions des autres.
Dans le prochain chapitre, vous ferez connaissance d'autres outils puissants et apprendrez des astuces pour
gérer des situations complexes ce qui fera de vous un vrai maître de Git.
