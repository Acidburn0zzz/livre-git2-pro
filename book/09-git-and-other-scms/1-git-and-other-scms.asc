== Git et les autres systèmes

Le monde n'est pas parfait.
Habituellement, vous ne pouvez pas basculer immédiatement sous Git tous les projets que vous pourriez rencontrer.
Quelques fois, vous êtes bloqué sur un projet utilisant un autre VCS et vous regrettez que ce ne soit pas Git.
Dans la première partie de ce chapitre, nous traiterons de le manière d'utiliser git comme client pour les projets utilisant un autre système.

À un moment, vous voudrez convertir votre projet à Git.
La seconde partie de ce chapitre traite la migration de votre projet dans Git depuis certains systèmes spécifiques et enfin par un script d'import personnalisé pour les cas non-standards.

=== Git comme client

(((Git comme client)))
Git fournit de si bonnes sensations aux développeurs que de nombreuses personnes ont cherché à l'utiliser sur leur station de travail, même si le reste de leur équipe utilise un VCS complètement différent.
Il existe un certain nombre d'adaptateurs appelés « passerelles ».
Nous allons en décrire certains des plus communs.

include::sections/client-svn.asc[]

include::sections/client-hg.asc[]

include::sections/client-p4.asc[]

include::sections/client-tfs.asc[]

[[_migrating]]
=== Migrating to Git

(((Migrating to Git)))
If you have an existing codebase in another VCS but you've decided to start using Git, you must migrate your project one way or another.
This section goes over some importers for common systems, and then demonstrates how to develop your own custom importer.
You'll learn how to import data from several of the bigger professionally used SCM systems, because they make up the majority of users who are switching, and because high-quality tools for them are easy to come by.

include::sections/import-svn.asc[]

include::sections/import-hg.asc[]

include::sections/import-p4.asc[]

include::sections/import-tfs.asc[]

include::sections/import-custom.asc[]

=== Summary

You should feel comfortable using Git as a client for other version-control systems, or importing nearly any existing repository into Git without losing data.
In the next chapter, we'll cover the raw internals of Git so you can craft every single byte, if need be.
