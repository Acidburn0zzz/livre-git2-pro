[[_git_tfs]]
==== TFS

(((TFS)))(((Importation, depuis TFS)))
Si votre équipe est en train de convertir son code source de TFVC à Git, vous voudrez la conversion de la plus haute fidélité que vous puissiez obtenir.
Cela signifie que, tandis que nous couvrions à la fois git-tfs et git-tf pour la section interop, nous couvrirons seulement git-tfs dans cette partie, parce que git-tfs supporte les branches, et c'est excessivement difficile en utilisant git-tf.

[NOTE]
====
Ceci est une conversion à sens unique.
Le dépôt Git résultant ne pourra pas se connecter au projet TFVC original.
====

La première chose à faire est d'associer les noms d'utilisateur.
TFC est assez permissif pour ce qui va dans le champ auteur pour les changements, mais Git veut un nom et une adresse de courriel lisibles par un humain.
Vous pouvez obtenir cette information depuis la ligne de commande client `tf`, comme ceci :

[source,powershell]
----
PS> tf history $/myproject -recursive | cut -b 11-20 | tail -n+3 | uniq | sort > AUTHORS
----

Ceci récupère tous les changements dans l'historique du projet.
La commande `cut` ignore tout sauf les caractères 11-20 de chaque ligne (vous devrez essayer avec la longueur des champs pour avoir les bonnes valeurs).
La commande `tail` saute les deux premières lignes, qui sont des champs d'en-tête et des soulignés dans le style ASCII.
Le résultat de tout ceci est envoyé à `uniq` pour éliminer les doublons, et sauvé dans un fichier nommé `AUTHORS`.
L'étape suivante est manuelle ; afin que git-tfs fasse un usage effectif de ce fichier, chaque ligne doit être dans ce format :

[source,text]
----
DOMAIN\username = User Name <email@address.com>
----

La partie gauche est le champ ``utilisateur'' de TFVC, et la partie droite du signe égal est le nom d'utilisateur qui sera utilisé pour les commits Git.

Une fois que vous avez ce fichier, la chose suivante à faire est de faire un clone complet du projet TFVC auquel vous êtes intéressé :

[source,powershell]
----
PS> git tfs clone --with-branches --authors=AUTHORS https://username.visualstudio.com/DefaultCollection $/project/Trunk project_git
----

Ensuite vous voudrez nettoyer les sections `git-tfs-id` du bas des messages de commit.
La commande suivante le fera :

[source,powershell]
----
PS> git filter-branch -f --msg-filter 'sed "s/^git-tfs-id:.*$//g"' -- --all
----

Cela utilise la commande `sed` de l'environnement Git-bash pour remplacer n'importe quelle ligne commençant par « git-tfs-id: » par du vide que Git ignorera ensuite.

Une fois cela fait, vous êtes prêt à ajouter un nouveau serveur distant, y pousser toutes les branches, et vous avez votre équipe prête à commencer à travailler depuis Git.
