==== Git et TFS

(((Interopération avec d'autres VCS, TFS)))
(((TFS)))((("TFVC", see="TFS")))
Git est en train de devenir populaire chez les développeurs Windows et si vous écrivez du code pour Windows, il y a de fortes chances que vous utilisiez _Team Foundation Server_ (TFS) de Microsoft.
TFS est une suite collaborative qui inclut le suivi de tickets et de tâches, le support de modes de développement Scrum et autres, la revue de code et la gestion de version.
Pour éviter toute confusion ultérieure, *TFS* est en fait le serveur, qui supporte la gestion de version de sources en utilisant à la fois Git et son propre gestionnaire de version, appelé *TFVC* (_Team Fundation Version Control_).
Le support de Git est une fonctionnalité assez nouvelle pour TFS (introduite dans la version 2013), donc tous les outils plus anciens font référence à la partie gestion de version comme « TFS », même s'ils ne fonctionnent réellement qu'avec TFVC.

Si vous vous trouvez au sein d'une équipe qui utilise TFVC mais que vous préférez utiliser Git comme client de gestionnaire de version, il y a un projet pour votre cas.

===== Quel outil

(((git-tf)))(((git-tfs)))
En fait, il y en a deux : git-tf et git-tfs.

Git-tfs (qu'on peut trouver à http://git-tfs.com[]) est un projet .NET et ne fonctionne que sous Windows (à l'heure de la rédaction du livre).
Pour travailler avec des dépôts Git, il utilise les liaisons .NET pour libgit2, une implémentation de Git orientée bibliothèque, qui est très performante et qui permet de manipuler avec beaucoup de flexibilité un dépôt Git à bas niveau.
Libgit2 n'est pas une implantation complète de Git, donc pour couvrir la différence, git-tfs va en fait appeler directement le client Git en ligne de commande pour certaines opérations de manière à éliminer les limites artificielles de ce qui est réalisable sur des dépôts Git.
Son support des fonctionnalités de TFVC est très mature, puisqu'il utilise les assemblages de Visual Studio pour les opérations avec les serveurs.
Cela implique que vous devez avoir accès à ces assemblages, ce qui signifie que vous devez installer une version récente de Visual Studio (n'importe quelle version depuis la version 2010, y compris la version Express depuis la version 2012), ou le SDK (Software Development Kit) Visual Studio.

Git-tf (dont le site est https://gittfs.codeplex.com[]) est un projet Java et en tant que tel peut fonctionner sur tout ordinateur supportant l'environnement d'exécution Java.
Il s'interface avec les dépôts Git à travers JGit (une implantation sur JVM de Git), ce qui signifie qu'il n'y a virtuellement aucune limitation en termes de fonctionnalités Git.
Cependant, le support pour TFVC est plus limité comparé à git-tfs - il ne supporte pas les branches par exemple.

Donc chaque outil a ses avantages et ses défauts, et de nombreuses situations favorisent l'un par rapport à l'autre.
Nous décrirons l'utilisation de base de chaque outil.

[NOTE]
====
Vous aurez besoin d'un accès à un dépôt TFVC pour pouvoir suivre les instructions qui vont suivre.
Il n'y en a pas beaucoup disponibles sur internet comme Git ou Subversion, et il se peut que vous deviez en créer un par vous-même.
Codeplex (https://www.codeplex.com[]) ou Visual Studio Online (http://www.visualstudio.com[]) sont tous deux de bons choix.
====


===== Démarrage : `git-tf`

La première chose à faire, comme toujours avec Git, c'est de cloner.
Voici à quoi cela ressemble avec `git-tf` :

[source,console]
----
$ git tf clone https://tfs.codeplex.com:443/tfs/TFS13 $/myproject/Main project_git
----

Le premier argument est l'URL de la collection TFVC, le deuxième est de la forme `/projet/branche` et le troisième est le chemin vers le dépôt local Git à créer (celui-ci est optionnel).
Git-tf ne peut fonctionner qu'avec une branche à la fois ; si vous voulez valider sur une branche TFVC différente, vous devrez faire un nouveau clone de cette branche.

Cela crée un dépôt Git complètement fonctionnel :

[source,console]
----
$ cd project_git
$ git log --all --oneline --decorate
512e75a (HEAD, tag: TFS_C35190, origin_tfs/tfs, master) Checkin message
----

Ceci s'appelle un clone _superficiel_, ce qui signifie que seule la dernière révision a été téléchargée.
TFVC n'est pas conçu pour que chaque client ait une copie complète de l'historique, donc git-tf ne récupère que la dernière révision par défaut, ce qui est plus rapide.

Si vous avez du temps, il vaut peut-être le coup de cloner l'intégralité de l'historique du projet, en utilisant l'option `--deep` :

[source,console]
----
$ git tf clone https://tfs.codeplex.com:443/tfs/TFS13 $/myproject/Main \
  project_git --deep
Username: domain\user
Password:
Connecting to TFS...
Cloning $/myproject into /tmp/project_git: 100%, done.
Cloned 4 changesets. Cloned last changeset 35190 as d44b17a
$ cd project_git
$ git log --all --oneline --decorate
d44b17a (HEAD, tag: TFS_C35190, origin_tfs/tfs, master) Goodbye
126aa7b (tag: TFS_C35189)
8f77431 (tag: TFS_C35178) FIRST
0745a25 (tag: TFS_C35177) Created team project folder $/tfvctest via the \
        Team Project Creation Wizard
----

Remarquez les étiquettes comprenant des noms tels que `TFS_C35189` ; c'est une fonctionnalité qui vous aide à reconnaître quels _commits_ Git sont associés à des modifications TFVC.
C'est une façon élégante de les représenter, puisque vous pouvez voir avec une simple commande `log` quels _commits_ sont associés avec un instantané qui existe aussi dans TFVC.
Elles ne sont pas nécessaires (en fait, on peut les désactiver avec `git config git-tf.tag false`) – git-tf conserve les correspondances _commit_-modification dans le fichier `.git/git-tf`.

===== Démarrage : `git-tfs`

Le clonage via Git-tfs se comporte légèrement différemment.
Observons :

[source,powershell]
----
PS> git tfs clone --with-branches \
    https://username.visualstudio.com/DefaultCollection \
    $/project/Trunk project_git
Initialized empty Git repository in C:/Users/ben/project_git/.git/
C15 = b75da1aba1ffb359d00e85c52acb261e4586b0c9
C16 = c403405f4989d73a2c3c119e79021cb2104ce44a
Tfs branches found:
- $/tfvc-test/featureA
The name of the local branch will be : featureA
C17 = d202b53f67bde32171d5078968c644e562f1c439
C18 = 44cd729d8df868a8be20438fdeeefb961958b674
----

Notez l'option `--with-branches`.
Git-tfs est capable de faire correspondre les branches de TFVC et Git, et cette option indique de créer une branche Git locale pour chaque branche TFVC.
C'est hautement recommandé si vous avez déjà fait des branches et des fusions dans TFS, mais cela ne fonctionnera pas avec un serveur plus ancien que TFS 2010 – avant cette version, les « branches » n'étaient que des répertoires et git-tfs ne peut pas les différencier de répertoires normaux.

Visitons le dépôt Git résultant :

[source,powershell]
----
PS> git log --oneline --graph --decorate --all
* 44cd729 (tfs/featureA, featureA) Goodbye
* d202b53 Branched from $/tfvc-test/Trunk
* c403405 (HEAD, tfs/default, master) Hello
* b75da1a New project
PS> git log -1
commit c403405f4989d73a2c3c119e79021cb2104ce44a
Author: Ben Straub <ben@straub.cc>
Date:   Fri Aug 1 03:41:59 2014 +0000

    Hello

    git-tfs-id: [https://username.visualstudio.com/DefaultCollection]$/myproject/Trunk;C16
----

Il y a deux branches locales, `master` et `featureA`, ce qui correspond au point de départ du clone (`Trunk` dans TFVC) et à une branche enfant (`featureA` dans TFVC).
Vous pouvez voir que le « dépôt distant » `tfs` contient aussi des références : `default` et `featureA` qui représentent les branches TFVC.
Git-tfs fait correspondre la branche que vous avez clonée depuis `tfs/default`, et les autres récupèrent leur propre nom.

Une autre chose à noter concerne les lignes `git-tfs-id:` dans les messages de validation.
Au lieu d'étiquettes, git-tfs utilise ces marqueurs pour faire le lien entre les modifications TFVC et les _commits_ Git.
Cela implique que les _commits_ Git vont avoir une empreinte SHA-1 différente entre avant et après avoir été poussés sur TFVC.

===== Travail avec Git-tf[s]

[NOTE]
====
Indépendamment de chaque outil que vous utilisez, vous devriez renseigner quelques paramètres de configuration Git pour éviter les ennuis.

[source,console]
----
$ git config set --local core.ignorecase=true
$ git config set --local core.autocrlf=false
----
====

Evidemment, vous souhaitez ensuite travailler sur le projet.
TFVC et TFS ont des caractéristiques qui peuvent complexifier votre travail :

. Les branches thématiques qui ne sont pas représentées dans TFVC ajoutent un peu de complexité.
  Cela est dû à la manière *très* différente dont TFVC et Git représentent les branches.
. Soyez conscient que TFVC permet aux utilisateurs d'« extraire » des fichiers depuis le serveur en les verrouillant pour qu'aucun autre utilisateur ne puisse les éditer.
  Cela ne vous empêchera évidemment pas de les éditer dans votre dépôt local, mais cela pourrait être un obstacle au moment de pousser vos modifications sur le serveur TFVC.
. TFS a le concept de validations « gardées », où un cycle de compilation/test TFS doit se terminer avec succès pour que la validation soit acceptée.
  Cela utilise la fonction « enterrement » (_shelve_) dans TFVC, que nous ne détaillons pas en détail ici.
  Vous pouvez simuler ceci manuellement avec git-tf, et git-tfs fournit la commande `checkintool` qui connaît le concept de garde.

Pour abréger, nous n'allons traiter que le cas sans erreur, qui contourne ou évite quasiment tous les problèmes.

===== Travail avec `git-tf`

Supposons que vous ayez travaillé et validé quelques _commits_ sur `master` et que vous êtes prêt à partager votre progression sur le serveur TFVC.
Voici notre dépôt Git :

[source,console]
----
$ git log --oneline --graph --decorate --all
* 4178a82 (HEAD, master) update code
* 9df2ae3 update readme
* d44b17a (tag: TFS_C35190, origin_tfs/tfs) Goodbye
* 126aa7b (tag: TFS_C35189)
* 8f77431 (tag: TFS_C35178) FIRST
* 0745a25 (tag: TFS_C35177) Created team project folder $/tfvctest via the \
          Team Project Creation Wizard
----

Nous voulons prendre l'instantané qui est dans le _commit_ `4178a82` et le pousser sur le serveur TFVC.

Tout d'abord, vérifions si un de nos collègues a fait quelque chose depuis notre dernière connexion :

[source,console]
----
$ git tf fetch
Username: domain\user
Password:
Connecting to TFS...
Fetching $/myproject at latest changeset: 100%, done.
Downloaded changeset 35320 as commit 8ef06a8. Updated FETCH_HEAD.
$ git log --oneline --graph --decorate --all
* 8ef06a8 (tag: TFS_C35320, origin_tfs/tfs) just some text
| * 4178a82 (HEAD, master) update code
| * 9df2ae3 update readme
|/
* d44b17a (tag: TFS_C35190) Goodbye
* 126aa7b (tag: TFS_C35189)
* 8f77431 (tag: TFS_C35178) FIRST
* 0745a25 (tag: TFS_C35177) Created team project folder $/tfvctest via the \
          Team Project Creation Wizard
----

Il semble que c'est le cas et nous avons maintenant un historique divergent.
C'est là où Git brille, mais nous avons deux options :

. Faire un _commit_ de fusion semble naturel pour un utilisateur Git (après tout, c'est ce que `git pull` réalise), et git-tf peut faire cela pour vous avec un simple `git tf pull`.
  Gardez cependant à l'esprit que TFVC n'est pas conçu de cette manière et si vous poussez des _commits_ de fusion, votre historique va commencer à être différent entre les deux côtés, ce qui peut être déroutant.
  Cependant, si vous comptez soumettre tout votre travail comme une modification unique, c'est sûrement le choix le plus simple.
. Rebaser pour rendre votre historique linéaire, ce qui signifie que nous avons l'option de convertir chaque _commit_ Git en modification TFVC.
  Comme c'est l'option qui laisse le plus de possibilités ouvertes, c'est la méthode recommandée ; `git-tf̀  facilite même cette méthode avec la commande `git tf pull --rebase`.

Le choix reste le vôtre.
Pour cet exemple, nous rebaserons :

[source,console]
----
$ git rebase FETCH_HEAD
First, rewinding head to replay your work on top of it...
Applying: update readme
Applying: update code
$ git log --oneline --graph --decorate --all
* 5a0e25e (HEAD, master) update code
* 6eb3eb5 update readme
* 8ef06a8 (tag: TFS_C35320, origin_tfs/tfs) just some text
* d44b17a (tag: TFS_C35190) Goodbye
* 126aa7b (tag: TFS_C35189)
* 8f77431 (tag: TFS_C35178) FIRST
* 0745a25 (tag: TFS_C35177) Created team project folder $/tfvctest via the \
          Team Project Creation Wizard
----

À présent, nous sommes prêt à valider dans le serveur TFVC.
Git-tf vous laisse le choix de faire un changement unique qui représente toutes les modifications depuis le dernier réalisé (`--shallow`, par défaut) ou de créer une nouvelle modification pour chaque _commit_ Git (`--deep`).
Pour cet exemple, nous allons créer une modification unique :

[source,console]
----
$ git tf checkin -m 'Updating readme and code'
Username: domain\user
Password:
Connecting to TFS...
Checking in to $/myproject: 100%, done.
Checked commit 5a0e25e in as changeset 35348
$ git log --oneline --graph --decorate --all
* 5a0e25e (HEAD, tag: TFS_C35348, origin_tfs/tfs, master) update code
* 6eb3eb5 update readme
* 8ef06a8 (tag: TFS_C35320) just some text
* d44b17a (tag: TFS_C35190) Goodbye
* 126aa7b (tag: TFS_C35189)
* 8f77431 (tag: TFS_C35178) FIRST
* 0745a25 (tag: TFS_C35177) Created team project folder $/tfvctest via the \
          Team Project Creation Wizard
----

Il y a une nouvelle étiquette `TFS_C35348` qui indique que TFVC stocke le même instantané que le _commit_ `5a0e25e`.
Il est important de noter que chaque _commit_ Git n'a pas besoin d'avoir une contrepartie exacte dans TFVC ; le _commit_ `6eb3eb5`, par exemple, n'existe pas sur le serveur.

C'est le style de gestion principal.
Gardez en tête les quelques autres aspects de cette utilisation :

* Il est impossible d'utiliser les branches.
  Git-tf ne peut créer des dépôts Git qu'à partir d'une branche de TFVC à la fois.
* Le serveur central est TFVC ou Git, pas les deux.
  Différents clones git-tf du même dépôt TFVC peuvent avoir des empreintes SHA-1 différentes, ce qui sera un casse-tête sans fin.
* Si la gestion dans votre équipe consiste à collaborer par Git et à synchroniser périodiquement avec TFVC, ne connectez TFVC qu'à un seul dépôt Git.

===== Travailler avec `git-tfs`

Déroulons le même scénario en utilisant `git-tfs`.
Voici les nouveaux _commits_ que nous avons ajoutés à la branche `master` dans notre dépôt Git :

[source,powershell]
----
PS> git log --oneline --graph --all --decorate
* c3bd3ae (HEAD, master) update code
* d85e5a2 update readme
| * 44cd729 (tfs/featureA, featureA) Goodbye
| * d202b53 Branched from $/tfvc-test/Trunk
|/
* c403405 (tfs/default) Hello
* b75da1a New project
----

Maintenant, voyons si quelqu'un a avancé pendant que nous travaillions de notre côté :

[source,powershell]
----
PS> git tfs fetch
C19 = aea74a0313de0a391940c999e51c5c15c381d91d
PS> git log --all --oneline --graph --decorate
* aea74a0 (tfs/default) update documentation
| * c3bd3ae (HEAD, master) update code
| * d85e5a2 update readme
|/
| * 44cd729 (tfs/featureA, featureA) Goodbye
| * d202b53 Branched from $/tfvc-test/Trunk
|/
* c403405 Hello
* b75da1a New project
----

Oui, un collègue a ajouté une nouvelle modification TFVC, qui prend la forme du nouveau _commit_ `aea74a0`, ce qui a fait avancer la branche `tfs/default`.

De la même manière qu'avec `git-tf`, nous avons deux options pour résoudre l'historique divergent :

. Rebaser pour préserver l'historique linéaire,
. fusionner pour préserver ce qui s'est réellement passé.

Dans cet exemple, nous allons réaliser une validation « profonde » où chaque _commit_ Git devient une modification TFVC, ce qui implique que nous rebasions.

[source,powershell]
----
PS> git rebase tfs/default
First, rewinding head to replay your work on top of it...
Applying: update readme
Applying: update code
PS> git log --all --oneline --graph --decorate
* 10a75ac (HEAD, master) update code
* 5cec4ab update readme
* aea74a0 (tfs/default) update documentation
| * 44cd729 (tfs/featureA, featureA) Goodbye
| * d202b53 Branched from $/tfvc-test/Trunk
|/
* c403405 Hello
* b75da1a New project
----

Nous voici prêts à réintégrer notre code dans le serveur TFVC.
Nous utiliserons la commande `rcheckin` pour créer des modifications TFVC pour chaque _commit_ Git dans le parcours entre HEAD et la première branche distante `tfs` trouvée (la commande `checkin` ne créerait qu'une modification, comme si on compressait tous les _commits_).

[source,powershell]
----
PS> git tfs rcheckin
Working with tfs remote: default
Fetching changes from TFS to minimize possibility of late conflict...
Starting checkin of 5cec4ab4 'update readme'
 add README.md
C20 = 71a5ddce274c19f8fdc322b4f165d93d89121017
Done with 5cec4ab4b213c354341f66c80cd650ab98dcf1ed, rebasing tail onto new TFS-commit...
Rebase done successfully.
Starting checkin of b1bf0f99 'update code'
 edit .git\tfs\default\workspace\ConsoleApplication1/ConsoleApplication1/Program.cs
C21 = ff04e7c35dfbe6a8f94e782bf5e0031cee8d103b
Done with b1bf0f9977b2d48bad611ed4a03d3738df05ea5d, rebasing tail onto new TFS-commit...
Rebase done successfully.
No more to rcheckin.
PS> git log --all --oneline --graph --decorate
* ff04e7c (HEAD, tfs/default, master) update code
* 71a5ddc update readme
* aea74a0 update documentation
| * 44cd729 (tfs/featureA, featureA) Goodbye
| * d202b53 Branched from $/tfvc-test/Trunk
|/
* c403405 Hello
* b75da1a New project
----

Remarquez comment après chaque enregistrement réussi dans le serveur TFVC, git-tfs rebase le travail restant sur ce qui vient d'être intégré.
C'est dû à l'addition du champ `git-tfs-id` au bas du message de validation, qui modifie l'empreinte SHA-1 du _commit_ dernièrement enregistré.
Cela se passe comme prévu et il n'y a pas lieu de s'en inquiéter, mais il faut garder à l'esprit cette transformation, spécialement si vous partagez des _commits_ Git avec d'autres développeurs.

TFS a de nombreuses fonctionnalités intégrées avec le système de gestion de version, telles que les tâches, les revues, les enregistrements gardés, etc.
Travailler avec ces fonctionnalités à partir de la ligne de commande peut être lourd mais heureusement, git-tfs permet de lancer très facilement un outil d'enregistrement graphique :

[source,powershell]
----
PS> git tfs checkintool
PS> git tfs ct
----

L'outil ressemble à ceci :

.L'outil d'enregistrement git-tfs.
image::images/git-tfs-ct.png[L'outil d'enregistrement git-tfs.]

Les utilisateurs de TFS le connaissent, puisque c'est la même boîte de dialogue que celle lancée depuis Visual Studio.

Git-tfs vous laisse aussi gérer vos branches TFVC depuis votre dépôt Git.
Par exemple, nous allons en créer une :

[source,powershell]
----
PS> git tfs branch $/tfvc-test/featureBee
The name of the local branch will be : featureBee
C26 = 1d54865c397608c004a2cadce7296f5edc22a7e5
PS> git lga
* 1d54865 (tfs/featureBee) Creation branch $/myproject/featureBee
* ff04e7c (HEAD, tfs/default, master) update code
* 71a5ddc update readme
* aea74a0 update documentation
| * 44cd729 (tfs/featureA, featureA) Goodbye
| * d202b53 Branched from $/tfvc-test/Trunk
|/
* c403405 Hello
* b75da1a New project
----

Créer une branche dans TFVC signifie ajouter une modification où cette branche existe à présent, ce qui se traduit par un _commit_ Git.
Notez aussi que git-tfs a *créé* la branche distante `tfs/featureBee`, mais `HEAD` pointe toujours sur `master`.
Si vous voulez travailler sur la toute nouvelle branche, vous souhaiterez baser vos nouveaux _commits_ sur `1d54865`, peut-être en créant une branche thématique sur ce _commit_.

===== Résumé Git et TFS

Git-tf et Git-tfs sont tous deux des grands outils pour s'interfacer avec un serveur TFVC.
Ils vous permettent d'utiliser la puissance de Git localement, vous évitant d'avoir sans arrêt à faire des aller-retours avec le serveur central TFVC et simplifie votre vie de développeur, sans forcer toute l'équipe à passer sous Git.
Si vous travaillez sous Windows (ce qui est très probable si votre équipe utilise TFS), vous souhaiterez utiliser git-tfs car ses fonctionnalités sont les plus complètes, mais si vous travaillez avec une autre plate-forme, vous utiliserez git-tf qui est plus limité.
Comme avec la plupart des outils vus dans ce chapitre, vous avez intérêt à vous standardiser sur un de ces systèmes de gestion de version et à utiliser l'autre comme miroir ‒ soit Git, soit TFVC doivent être le centre de collaboration, pas les deux.
